// const arr = [1,2,3,4,5];
// // console.log(arr.map());


const objA = {
    _email: 'test',
    name: "User objA",
    getName() {
        console.log(this.name);
    },
    _getEmail(){

    }
}

const objB = Object.create(objA);
console.log(objB);
// const objC = Object.create(objB);
// objB.name = 'User objB';
// objC.age = 44

// // objC.getName()
// console.log(objC);
// // console.log(objC.age);
// const keys = Object.keys(objC)
// console.log(keys);
// // for (const key in objC) {
// //     if (objC.hasOwnProperty(key)) {
// //         console.log(`${key}`, objC[key]);
// //     }

// // }


// keys.forEach(key => console.log(`${key}`, objC[key]))

// function sayHello(name){
//     console.log(`Hi my name is ${name}, from custom function`);
// }

// String.prototype.qwerty = sayHello;

// const str ='dviudhgyagoxaio';

// https://medium.com/@alivander/%D1%81%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0-%D0%BF%D1%83%D0%B7%D1%8B%D1%80%D1%8C%D0%BA%D0%BE%D0%BC-javascript-54462b2989a6

// console.log(typeof str);
// str.qwerty('Artem')


// class User {
//     static counter = 0;
//     static addUser() {
//         this.counter += 1
//         // console.log(this.counter);
//     }
//     static stock = {
//         inStock: 'Product in stock',
//         outStock: 'Product out of stock'
//     }
//     #email;
//     constructor(name, email, age, stock) {
//         this.name = name;
//         this.#email = email;
//         this.age = age;
//         this.stock = stock;
//         User.addUser()
//     }
//     getName() {
//         console.log(this.name);
//     }
//     get getEmail() {
//         const password = prompt('Enter password');
//         if (password === 'qwerty' && this.#checkAge()) {
//             return this.#email;
//         } else {
//             console.log('NO üò•');
//         }
//     }

//     set getEmail(newEmail) {
//         if (newEmail.includes('@') && newEmail.includes('.')) {
//             this.#email = newEmail;
//         } else {
//             console.log('NO üò•');
//         }
//     }
//     #checkAge() {
//         this.getName()
//         if (this.age >= 18) {
//             return true
//         } else {
//             return false
//         }
//     }
// }


// // const objA = new User('User A', 'test@gmail.com', 18, User.stock.inStock)
// // // objA.getName()

// // // console.log(objA.getEmail);
// // // objA.getEmail = 'qwe@gm.mm';

// // const objB = new User('User B', 'test@gmail.com', 30, User.stock.outStock)
// // console.log(objA, objB);
// // const objC = new User('User C', 'test@gmail.com', 30)
// // // console.log(User.counter);
// // console.log('tyt', objC.constructor.counter);
// // console.log("objA", objA);
// // console.log("objB", objB);

// class Warrior extends User {
//     constructor(name, email, age, stock, damage) {
//         super(name, email, age, stock)
//         this.damage = damage;
//     }
// }

// class Mage extends User {
//     constructor(name, email, age, stock, mana) {
//         super(name, email, age, stock)
//         this.mana = mana;
//     }
// }


// class Student extends Mage {
//     constructor(name, email, age, stock, mana, element) {
//         super(name, email, age, stock, mana)
//         this.element = element
//     }
// }



// const objD = new Student('Mage', 'test@gmail.com', 192, User.stock.inStock, 100,'Fire üòà')
// console.log(objD);

// const objA = new Warrior('Warrior', 'test@gmail.com', 18, User.stock.inStock, 500);
// console.log(objA);
// const objb = new Mage('Mage', 'test@gmail.com', 192, User.stock.inStock, 100);
// console.log(objb);
// console.log(User.counter);







// Example 1 - –ë–ª–æ–≥–µ—Ä
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Blogger –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –±–ª–æ–≥–µ—Ä–∞ –∑ –Ω–∞—Å—Ç—É–ø–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏:

// email - –ø–æ—à—Ç–∞, —Ä—è–¥–æ–∫
// age - –≤—ñ–∫, —á–∏—Å–ª–æ
// numberOfPosts - –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —á–∏—Å–ª–æ
// topics - –º–∞—Å–∏–≤ —Ç–µ–º –Ω–∞ —è–∫–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑—É—î—Ç—å—Å—è –±–ª–æ–≥–µ—Ä
// –ö–ª–∞—Å —á–µ–∫–∞—î –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä - –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –∑ –æ–¥–Ω–æ–π–º–µ–Ω–Ω–∏–º–∏ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ getInfo(), —è–∫–∏–π, –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: User ${–ø–æ—à—Ç–∞} is ${–≤—ñ–∫} years old and has ${–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤} posts.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥ updatePostCount(value), —è–∫–∏–π —É –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ value –ø—Ä–∏–π–º–∞—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤, —è–∫—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–≤—ñ.

// class User {
//     constructor({
//         name,
//         age,
//         numberOfPosts,
//         topics
//     }) {
//         this.name = name;
//         this.age = age;
//         this.numberOfPosts = numberOfPosts;
//         this.topics = topics;
//     }
//     getInfo(){
//         return `User ${this.name} is ${this.age} years old and has ${this.numberOfPosts} posts.`
//     }
//     updatePostCount(value){
//         this.numberOfPosts += value;
//     }
// }


// const mango = new User({
//     name: 'mango@mail.com',
//     age: 24,
//     numberOfPosts: 20,
//     topics: ['tech', 'cooking'],
// });
// console.log(mango);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 20 posts
// mango.updatePostCount(5);
// console.log(mango.getInfo()); // User mango@mail.com is 24 years old and has 25 posts

// const poly = new User({
//   name: 'poly@mail.com',
//   age: 19,
//   numberOfPosts: 17,
//   topics: ['sports', 'gaming', 'health'],
// });
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 17 posts
// poly.updatePostCount(4);
// console.log(poly.getInfo()); // User poly@mail.com is 19 years old and has 21 posts



// Example 2 - –°—Ö–æ–≤–∏—â–µ
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Storage —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–∫–ª–∞–¥–æ–º —Ç–æ–≤–∞—Ä—ñ–≤. –ü—Ä–∏ –≤–∏–∫–ª–∏–∫—É –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏–º–µ –æ–¥–∏–Ω –∞—Ä–≥—É–º–µ–Ω—Ç - –ø–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤ —ñ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏–º–µ –π–æ–≥–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å items.

// –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—É
// class Storage {
//     constructor(products) {
//         this.items = products;
//     }
//     getItems() {
//         return this.items;
//     }
//     addItem(item) {
//         if (!this.getItems().includes(item)) {
//             this.items.push(item)
//         }
//     }
//     removeItem(item) {
//         const idx = this.getItems().indexOf(item)
//         // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_NOT
//         // console.log(~idx)
//         // console.log(!!~idx); // !-1 => !false => true
//         // console.log(Boolean(~idx));
//         console.log(!!~-1);
//         if (!!~idx) {
//             this.items.splice(idx,1)
//         }
//     }
// }

// // getItems() - –ø–æ–≤–µ—Ä—Ç–∞—î –º–∞—Å–∏–≤ —Ç–æ–≤–∞—Ä—ñ–≤.
// // addItem(item) - –æ—Ç—Ä–∏–º—É—î –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä —ñ –¥–æ–¥–∞—î –π–æ–≥–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// // removeItem(item) - –æ—Ç—Ä–∏–º—É—î —Ç–æ–≤–∞—Ä —ñ, —è–∫—â–æ –≤—ñ–Ω —î, –≤–∏–¥–∞–ª—è—î –π–æ–≥–æ –∑ –ø–æ—Ç–æ—á–Ω–∏—Ö.
// const storage = new Storage(['üçé', 'üçã', 'üçá', 'üçë']);
// console.log(storage);
// // const items = storage.getItems();
// // console.table(items); // [ 'üçé', 'üçã', 'üçá', 'üçë' ]
// storage.addItem('üçå');
// // console.table(storage.getItems()); // [ 'üçé', 'üçã', 'üçá', 'üçë', 'üçå' ]
// storage.removeItem('üçã');
// storage.removeItem('üòé');
// console.table(storage.items); // [ 'üçé', 'üçá', 'üçë', 'üçå' ]



// Example 3 - User
// –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å User —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ login —Ç–∞ email. –û–≥–æ–ª–æ—Å–∏ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ #login —Ç–∞ #email, –¥–æ—Å—Ç—É–ø –¥–æ —è–∫–∏—Ö –∑—Ä–æ–±–∏ —á–µ—Ä–µ–∑ –≥–µ—Ç–µ—Ä —Ç–∞ —Å–µ—Ç–µ—Ä login —Ç–∞ email.

// const mango = new User({
//   login: 'Mango',
//   email: 'mango@dog.woof',
// });

// console.log(mango.login); // Mango
// mango.login = 'Mangodoge';
// console.log(mango.login); // Mangodoge

// const poly = new User({
//   login: 'Poly',
//   email: 'poly@mail.com',
// });

// console.log(poly.login); // Poly
// poly.login = 'Polycutie';
// console.log(poly.login); // Polycutie
// // Example 4 - –ù–æ—Ç–∞—Ç–∫–∏
// // –ù–∞–ø–∏—à–∏ –∫–ª–∞—Å Notes —è–∫–∏–π –∫–µ—Ä—É—î –∫–æ–ª–µ–∫—Ü—ñ—î—é –Ω–æ—Ç–∞—Ç–æ–∫ —É –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ items. –ó–∞–º—ñ—Ç–∫–∞ —Ü–µ –æ–±'—î–∫—Ç —ñ–∑ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—è–º–∏ text —Ç–∞ priority. –î–æ–¥–∞–π –∫–ª–∞—Å—É —Å—Ç–∞—Ç–∏—á–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å Priority, —É —è–∫–æ–º—É –∑–±–µ—Ä—ñ–≥–∞—Ç–∏–º–µ—Ç—å—Å—è –æ–±'—î–∫—Ç —ñ–∑ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.

// // {
// //   LOW: 'low',
// //   NORMAL: 'normal',
// //   HIGH: 'high'
// // }
// // –î–æ–¥–∞–π –º–µ—Ç–æ–¥–∏ addNote(note), removeNote(text) —Ç–∞ updatePriority(text, newPriority).

// const myNotes = new Notes([]);

// myNotes.addNote({ text: '–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞', priority: Notes.Priority.LOW });
// console.log(myNotes.items);

// myNotes.addNote({
//   text: '–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞',
//   priority: Notes.Priority.NORMAL,
// });
// console.log(myNotes.items);

// myNotes.removeNote('–ú–æ—è –ø–µ—Ä—à–∞ –∑–∞–º—ñ—Ç–∫–∞');
// console.log(myNotes.items);

// myNotes.updateNote('–ú–æ—è –¥—Ä—É–≥–∞ –∑–∞–º—ñ—Ç–∫–∞', Notes.Priority.HIGH);
// console.log(myNotes.items);



// // Example 5 - Toggle
// // –ù–∞–ø–∏—à—ñ—Ç—å –∫–ª–∞—Å Toggle —è–∫–∏–π –ø—Ä–∏–π–º–∞—î –æ–±'—î–∫—Ç –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å {isOpen: boolean} —ñ –æ–≥–æ–ª–æ—à—É—î –æ–¥–Ω—É –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å on - —Å—Ç–∞–Ω –≤–∫–ª/–≤–∏–∫–ª (true/false). –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∑–Ω–∞—á–µ–Ω–Ω—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ on –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ false.

// const firstToggle = new Toggle({ isOpen: true });
// console.group('firstToggle');
// console.log(firstToggle.on);
// firstToggle.toggle();
// console.log(firstToggle.on);
// console.groupEnd('firstToggle');

// const secondToggle = new Toggle();
// console.group('secondToggle');
// console.log(secondToggle.on);
// secondToggle.toggle();
// console.log(secondToggle.on);
// console.groupEnd('secondToggle');

// console.log(window);